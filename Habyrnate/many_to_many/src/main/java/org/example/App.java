package org.example;
/*

create table actor(
    id int generated by default as identity primary key ,
    name varchar(100) not null unique ,
    age int check ( age > 0)
);

create table movie(
    id int generated by default as identity primary key ,
    name varchar(200) not null ,
    year_of_production int check ( year_of_production > 1900 )
);

-- создаем связывающую таблицу (join table)

create table actor_movie(
    actor_id int references actor(id),
    movie_id int references movie(id),
    primary key (actor_id,movie_id)
)

 */

import org.example.modal.Actor;
import org.example.modal.Movie;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class App
{
    public static void main( String[] args )
    {
        Configuration configuration = new Configuration().addAnnotatedClass(Actor.class)
                .addAnnotatedClass(Movie.class);

        SessionFactory sessionFactory = configuration.buildSessionFactory();

        // try  с ресурсами
        try(sessionFactory) {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();
/*
// ---------------------------   создадим и двух актеров ----------------------------------------

                Movie movie = new Movie("Pulp fiction", 1994);
                Actor actor1 = new Actor("Harvy Keitel", 81);
                Actor actor2 = new Actor("Samuel L. Jackson", 72);
*//*

                * -- Так как у нас в бд нет данных нам нужно создать пустой лист с данными --
                * Arrays.asList() -- изменяемый но не расширяемый
                * Arrays.List.of() -- неизменяемый но не расширяемый

 *//*
                movie.setActors(new ArrayList<>(List.of(actor1,actor2)));

//               так как мы знаем что элемент один то мы создаем список из
//              одного элемента используя Collections.singletonList()
                actor1.setMovies(new ArrayList<>(Collections.singletonList(movie)));
                actor2.setMovies(new ArrayList<>(Collections.singletonList(movie)));

//              так как нет каскадирования то сохраняем все в ручную
                session.save(movie);
                session.save(actor1);
                session.save(actor2);
*/


/*
// ---------------------------   получение данных из фильма и какие там снимались актеры  ----------------------------------------

            Movie movie = session.get(Movie.class,1);
            System.out.println(movie.getActors());

            Actor actor = session.get(Actor.class, 1);
            System.out.println(actor.getMovies());
*/

/*
// ---------------------------   добавление фильма к существующему актеру  ----------------------------------------

            Movie movie = new Movie("Reservoir Dogs",1992);
            Actor actor = session.get(Actor.class, 1);

            movie.setActors(new ArrayList<>(Collections.singletonList(actor)));

            actor.getMovies().add(movie);

            session.save(movie);
*/

// ---------------------------   Удаление актера из фильма  ----------------------------------------

            Actor actor = session.get(Actor.class, 2);
            Movie movieToRemove = actor.getMovies().get(0);
            // remove() -- перегруженный метод который принимает как объект для удаления,
            // так и индекс элемента для сравнивания объекта ему нужно
            // реализовать методы hashCode() и equals() в представлениях объекта актеров и фильмов
            actor.getMovies().remove(0);
            movieToRemove.getActors().remove(actor);


            session.getTransaction().commit();

        }
    }
}
