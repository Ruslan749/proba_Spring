---------------------------------  Spring Core  ----------------------------------------

****  @Component() -- аннотация которая создает bean и принимает на вход id
(название), если id отсутствует, принимает в качестве id название класса
только с маленькой буквы (RockMusic -> rockMusic)

****  @Autowired() -- аннотация используемая для внедрения зависимостей т.е
сама ищет подходящие компоненты и добавляет в нее зависимости

****  @Qualifier() -- аннотация которая уточняет какую зависимость внедрить
указывается в качестве аргумента id бина

**** @Scope() -- отвечает за создание объекта принимает на вход два параметра
"singleton" - указывает на то что объект будет создаваться один, а все
остальные попытки его создать образуют ссылки на этот объект
"prototype") - указывает на то что при каждом вызове будет создаваться новая
копия этого объекта

**** @PostConstruct -- аннотация которая вызовет функцию в начале инициализации
объекта

**** @PreDestroy -- аннотация которая вызовет функцию в конце инициализации
объекта

**** @Value("${musicPlayer.name}") -- аннотация которая из файла musicPlayer.properties
назначает полям значения по указанному ключу, или передать любое другое значение

**** @Configuration -- помечает класс как конфигурационный файл для спринга


**** @ComponentScan -- принимает на вход путь до нахождения файлов
помеченных анатацией @Component()

**** @PropertySource принимает на вход путь файла musicPlayer.properties
для дальнейшего внедрения зависимостей

---------------------------------  Spring MVC  ----------------------------------------

**** @EnableWebMvc -- показывает что это спринг MVC  приложение

**** @Controller -- аннотация которая помечает объект как контроллер для того чтобы Spring
смог отсканировать этот компонент

**** @GetMapping -- аннотация которая указывает адрес при ссылке на который вызывается функция под ним

**** @RequestMapping("/first") -- добавляет к  @GetMapping выбранному в пути дополнительный путь

**** @RequestParam(value = "name", required = false -- принимает параметр от клиента (request) по заданным ключам
по умолчанию required = true что означает если по данной ссылке не будут указаны параметры то вернет ошибку 404,
если же required = false то если не будут записаны данные то он вернет страницу с пустыми данными

**** @PathVariable("id") int id,  -- извлекает из адреса @GetMapping("/{id}") id  и подставляет его
в переменную id метода

**** @ModelAttribute("person")  -- создаст модель класса Person и модель с ключом Person

**** @PatchMapping -- при помощи специальной формы изменяет выбранный объект Person

**** @DeleteMapping -- при помощи специальной формы удаляет выбранный объект Person

**** @Valid -- ставиться перед объектом на котором проверяться валидность

**** @NotEmpty(message  = "Name not be empty") -- проверяет у объекта, что строка не пустая если пустая
то выкидывает сообщение об ошибке

****  @Size(min=2, max=30, message = "Name > 2 and name < 30") -- проверяет размер значения, если оно не прошло
валидацию то выкидывает сообщение

****  @Min(value = 0, message = " min age not < 0") -- проверяет минимальное количество символов если оно не
валидное то выкидывает сообщение

**** @Email(message = "email not validation") -- проверяет email если он не валиден то выкидывает сообщение

---------------------------------  Hibernate  ----------------------------------------

Для модели: ________

**** @Entity -- помечает объект модели как объект для таблицы БД
**** @Table(name = "person") -- указывает название таблицы БД
**** @Id -- помечает что это особенное поле id
**** @Column(name = "id") --  указывает на ссылку в таблице указанной в @Table на то что эти данные лежат в
колонке id
**** @GeneratedValue(strategy = GenerationType.IDENTITY) -- указываем что id  генерируется на стороне базы данных

Отношение один ко многим:

сторона many:__________
        @ManyToOne -- помечаем что это сторона является стороной many
        @JoinColumn(name = "person_id", referencedColumnName = "id") -- помечаем какое поле является отношениями
     а в родительской колонке это значение с полем id

сторона one:______
            @OneToMany(mappedBy = "owner" , cascade = ?) -- помечаем ее данной аннотацией и указываем ее на переменную которая связана со стороной many
                ? -- CascadeType.PERSIST -- при сохранения главного элемента сохраняет и дочерний элемент через метод persist()

            @Cascade(org.hibernate.annotations.CascadeType.SAVE_UPDATE) -- при сохранения главного элемента сохраняет и дочерний элемент через метод save()
Для SpringConfig: ________

**** @PropertySource("classpath:hibernate.properties") -- указываем путь к файлу настроек hibernate
**** @EnableTransactionManagement -- указываем спрингу чтобы он управлял транзакциями

Для DAO: __________
**** @Transactional(readOnly = true) -- внутри этого метода будет открыта транзакция

---------------------------------  Spring Data JPA ----------------------------------------

Для SpringConfig: ________

@EnableJpaRepositories("com.example.repositories") -- указываем где будут находиться наши репозитории

Для репозитория: _______
@Repository -- указываем что мы наследуемся от репозитория data jpa
@Service -- указываем что этот класс является сервисом для бизнеса логики

Для даты_____
    @Temporal(TemporalType.DATE) -- создает объект дата и помещает в него дату
    @DateTimeFormat(pattern = "dd/MM/yyyy") -- указываем какой тип даты мы хотим получить в поле (дд/мм/гггг)

    @Temporal(TemporalType.TIMESTAMP) --- автоматически устанавливает сегодняшнею дату начиная от 1 января 2000г в секундах

Для Enum_______

@Enumerated(EnumType.ORDINAL) -- добавляет в поле номер индекса указанный в enum объекте и сохраняет его в базу данных
(при изменении порядка элементов в enum объекте не меняет его в таблице БД т.е. в таблице сохраняться старые значения)

@Enumerated(EnumType.STRING) -- сохраняет название Enum в виде строки
